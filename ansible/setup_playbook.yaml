---
- name: Kubernetes Pre-req Setup
  hosts: ['master','workers']
  become: yes
  tasks:
  - name: Disable swap.
    shell: swapoff -a
# Adapted from https://gist.github.com/rbq/886587980894e98b23d0eee2a1d84933#gistcomment-2629386
  - name: Add Docker GPG key
    apt_key: 
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    retries: 5

  - name: Install basic list of packages
    apt:
      name: ['apt-transport-https','ca-certificates','curl','gnupg2','software-properties-common']
      state: present
      update_cache: yes

  - name: Add Docker APT repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable

  - name: Install Docker packages
    apt:
      name: ['docker-ce','docker-ce-cli','containerd.io']
      state: present

# Set Cgroup driver to systemd per K8s reccomendation:
# to check you can use - docker info | grep -i 'cgroup driver'
  - name: Verify Docker is setup to use the Systemd Cgroup driver
    shell:
      cmd: sudo docker info -f {{ '{{.CgroupDriver}}' }}
    register: result
   
  - name: Check Docker daemon file.
    file:
      path: "/etc/docker/daemon.json"
      state: touch
    when: result.stdout != "systemd"

  - name: Copy the Docker daemon file.
    copy:
      src: artifacts/daemon.json
      dest: /etc/docker/daemon.json
    when: result.stdout != "systemd"

  - name: Create a directory for the systemd setup.
    file:
      path: "/etc/systemd/system/docker.service.d"
      state: directory
    when: result.stdout != "systemd"

  - name: Restart services.
    systemd:
      state: restarted
      daemon_reload: yes
      name: docker
    when: result.stdout != "systemd"

# Now Kubernetes
  - name: Add Kubernetes GPG key
    apt_key: 
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
    retries: 5

# Have to hard code the xenial due to the fact that they don't have a bionic repo yet.
#https://stackoverflow.com/questions/53068337/unable-to-add-kubernetes-bionic-main-ubuntu-18-04-to-apt-repository?answertab=active#tab-top
  - name: Add Kubernetes APT repository
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main

  - name: Install Kubernetes packages
    apt:
      name: ['kubelet','kubeadm','kubectl']
      state: present

  - name: Install Gluster packages
    apt:
      name: ['glusterfs-client']
      state: present
#TODO - DNS for the control plane endpoint.
- name: Kubernetes master setup
  hosts: master
  become: yes
  tasks:
  - name: Check kubernetes is setup on master
    service:
      name: kubelet
      state: started
    register: masterkubeletstatus

  - name: debug
    debug: 
      var: masterkubeletstatus.status.ActiveState

  - name: Run kubeadm on master
    shell: 
      cmd: "kubeadm init --pod-network-cidr=10.1.0.0/16 --control-plane-endpoint 192.168.1.20"
    when: masterkubeletstatus.status.ActiveState != "active"

  - name: register kudeadm join command
    shell: kubeadm token create --print-join-command --skip-log-headers
    register: kubeadmjoincommand
  
  - name: Fetch kubeconfig from master
    fetch:
      src: /etc/kubernetes/admin.conf
      dest: ~/.kube/config
      flat: yes

- name: Local ansible controller tasks
  hosts: local
  become: yes
  tasks:
  - name: Add Kubernetes GPG key
    apt_key: 
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Add Kubernetes APT repository
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
   
  - name: Install kubectl on ansible controller
    apt:
      name: kubectl
      state: present

  - name: Install python pip on ansible controller
    apt:
      name: python-pip
      state: present

  - name: Install openshift pip package
    pip:
      name: openshift

  - name: Apply calico
    become: no
    k8s: 
      state: present
      src: "../calico/calico.yaml"

  - name: Wait for calico pods to be ready
    become: no
    k8s_info: 
      kind: Pod
      namespace: kube-system
      label_selectors:
        - k8s-app = calico-node
    register: pod_status
    until: pod_status.resources[0].status.phase == 'Running'
    retries: 10
    delay: 10
    ignore_errors: yes
#https://github.com/ansible/ansible/issues/27081#issuecomment-493980378
  - name: Install Helm v3.1.2.
    unarchive:
      src: https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
      dest: /usr/local/bin
      extra_opts:
      - --strip=1
      - --wildcards
      - '*/helm'
      remote_src: True

  - name: Install pyhelm pip package
    pip:
      name: pyhelm
      executable: /usr/bin/pip
  
- name: Kubernetes workers setup
  hosts: workers
  become: yes
  tasks:
  - name: Check kubernetes is setup on workers
    service:
      name: kubelet
      state: started
    register: workerkubeletstatus

  - name: Run kubeadm on workers
    shell: "{{ hostvars['192.168.1.20']['kubeadmjoincommand']['stdout'] }}"
    when: workerkubeletstatus.status.ActiveState != "active"

- name: Setup glusterfs and xfs on master
  hosts: master
  tasks:
  - name: Gluster apt tasks
    apt: 
      name: ['glusterfs-server','xfsprogs']
      state: present

  - name: Gluster service enable
    service:
      name: glusterd
      state: started
      enabled: yes

  - name: Check fake disk exists
    stat:
      path: /srv/fakedisk
      get_checksum: False
      get_md5: False
    register: fake_disk

  - name: Pre-Gluster file operations
    block:
    - name: Make fake disk to use from gluster
      shell:
        cmd: truncate -s 100GB /srv/fakedisk
    when: fake_disk.stat.exists == False

  - name: setup loopback device
    shell:
      cmd: losetup /dev/loop9 /srv/fakedisk
    ignore_errors: yes
#TODO - sometimes this need to be rurun apparently??
  - name: lvm pv and volume group setup
    lvg:
      vg: lvg-gluster-k8s
      pvs: /dev/loop9
      state: present

  - name: lvm logical volume creation
    lvol:
      vg: lvg-gluster-k8s
      lv: lv-gluster-k8s
      size: 93G
      state: present

  - name: Format fake disk to use from gluster
    filesystem: 
      fstype: xfs
      dev: /dev/lvg-gluster-k8s/lv-gluster-k8s

- name: Gluster setup
  hosts: master
  tasks:
  - name: Create brick file
    file: 
      path: /data/brick1
      state: directory

  - name: Edit fstab file
    lineinfile: 
      path: /etc/fstab
      regexp: 'brick1'
      line:  "/dev/lvg-gluster-k8s/lv-gluster-k8s /data/brick1 xfs loop 0 0"

  - name: Mount all
    command: mount -a

  - name: Create gluster volume
    gluster_volume:
      state: present
      name: gluster_volume
      bricks: /data/brick1/brick
      cluster:
        - 192.168.1.20
      start_on_create: yes
    run_once: true